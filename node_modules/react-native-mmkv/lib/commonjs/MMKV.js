"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MMKV = void 0;

var _reactNative = require("react-native");

var _createMMKV = require("./createMMKV");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const onValueChangedListeners = new Map();
/**
 * A single MMKV instance.
 */

class MMKV {
  /**
   * Creates a new MMKV instance with the given Configuration.
   * If no custom `id` is supplied, `'default'` will be used.
   */
  constructor(configuration = {
    id: 'mmkv.default'
  }) {
    _defineProperty(this, "nativeInstance", void 0);

    _defineProperty(this, "functionCache", void 0);

    _defineProperty(this, "id", void 0);

    this.id = configuration.id;
    this.nativeInstance = (0, _createMMKV.createMMKV)(configuration);
    this.functionCache = {};
  }

  get onValueChangedListeners() {
    if (!onValueChangedListeners.has(this.id)) {
      onValueChangedListeners.set(this.id, []);
    }

    return onValueChangedListeners.get(this.id);
  }

  getFunctionFromCache(functionName) {
    if (this.functionCache[functionName] == null) {
      this.functionCache[functionName] = this.nativeInstance[functionName];
    }

    return this.functionCache[functionName];
  }

  onValuesAboutToChange(keys) {
    if (this.onValueChangedListeners.length === 0) return;
    setImmediate(() => {
      (0, _reactNative.unstable_batchedUpdates)(() => {
        for (const key of keys) {
          for (const listener of this.onValueChangedListeners) {
            listener(key);
          }
        }
      });
    });
  }

  set(key, value) {
    this.onValuesAboutToChange([key]);
    const func = this.getFunctionFromCache('set');
    return func(key, value);
  }

  getBoolean(key) {
    const func = this.getFunctionFromCache('getBoolean');
    return func(key);
  }

  getString(key) {
    const func = this.getFunctionFromCache('getString');
    return func(key);
  }

  getNumber(key) {
    const func = this.getFunctionFromCache('getNumber');
    return func(key);
  }

  contains(key) {
    const func = this.getFunctionFromCache('contains');
    return func(key);
  }

  delete(key) {
    this.onValuesAboutToChange([key]);
    const func = this.getFunctionFromCache('delete');
    return func(key);
  }

  getAllKeys() {
    const func = this.getFunctionFromCache('getAllKeys');
    return func();
  }

  clearAll() {
    const keys = this.getAllKeys();
    this.onValuesAboutToChange(keys);
    const func = this.getFunctionFromCache('clearAll');
    return func();
  }

  addOnValueChangedListener(onValueChanged) {
    this.onValueChangedListeners.push(onValueChanged);
    return {
      remove: () => {
        const index = this.onValueChangedListeners.indexOf(onValueChanged);

        if (index !== -1) {
          this.onValueChangedListeners.splice(index, 1);
        }
      }
    };
  }

}

exports.MMKV = MMKV;
//# sourceMappingURL=MMKV.js.map