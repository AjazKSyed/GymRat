import { useRef, useState, useMemo, useCallback, useEffect } from 'react';
import { MMKV } from './MMKV';

function isConfigurationEqual(left, right) {
  return left.encryptionKey === right.encryptionKey && left.id === right.id && left.path === right.path;
}

let defaultInstance = null;

function getDefaultInstance() {
  if (defaultInstance == null) {
    defaultInstance = new MMKV();
  }

  return defaultInstance;
}

export function useMMKV(configuration) {
  const instance = useRef();
  const lastConfiguration = useRef();

  if (lastConfiguration.current == null || !isConfigurationEqual(lastConfiguration.current, configuration)) {
    lastConfiguration.current = configuration;
    instance.current = new MMKV(configuration);
  } // @ts-expect-error it's not null, I promise.


  return instance;
}

function createMMKVHook(getter) {
  return (key, instance) => {
    const mmkv = instance !== null && instance !== void 0 ? instance : getDefaultInstance();
    const [value, setValue] = useState(() => getter(mmkv, key));
    const valueRef = useRef(value);
    valueRef.current = value;
    const set = useCallback(v => {
      const newValue = typeof v === 'function' ? v(valueRef.current) : v;

      switch (typeof newValue) {
        case 'number':
        case 'string':
        case 'boolean':
          mmkv.set(key, newValue);
          break;

        case 'undefined':
          mmkv.delete(key);
          break;

        default:
          throw new Error(`MMKV: Type ${typeof newValue} is not supported!`);
      }
    }, [key, mmkv]);
    useEffect(() => {
      const listener = mmkv.addOnValueChangedListener(changedKey => {
        if (changedKey === key) {
          setValue(getter(mmkv, key));
        }
      });
      return () => listener.remove();
    }, [key, mmkv]);
    return [value, set];
  };
}
/**
 * Use the string value of the given `key` from the given MMKV storage instance.
 *
 * If no instance is provided, a shared default instance will be used.
 *
 * @example
 * ```ts
 * const [username, setUsername] = useMMKVString("user.name")
 * ```
 */


export const useMMKVString = createMMKVHook((instance, key) => instance.getString(key));
/**
 * Use the number value of the given `key` from the given MMKV storage instance.
 *
 * If no instance is provided, a shared default instance will be used.
 *
 * @example
 * ```ts
 * const [age, setAge] = useMMKVNumber("user.age")
 * ```
 */

export const useMMKVNumber = createMMKVHook((instance, key) => instance.getNumber(key));
/**
 * Use the boolean value of the given `key` from the given MMKV storage instance.
 *
 * If no instance is provided, a shared default instance will be used.
 *
 * @example
 * ```ts
 * const [isPremiumAccount, setIsPremiumAccount] = useMMKVBoolean("user.isPremium")
 * ```
 */

export const useMMKVBoolean = createMMKVHook((instance, key) => instance.getBoolean(key));
/**
 * Use an object value of the given `key` from the given MMKV storage instance.
 *
 * If no instance is provided, a shared default instance will be used.
 *
 * The object will be serialized using `JSON`.
 *
 * @example
 * ```ts
 * const [user, setUser] = useMMKVObject<User>("user")
 * ```
 */

export function useMMKVObject(key, instance) {
  const [string, setString] = useMMKVString(key, instance);
  const value = useMemo(() => {
    if (string == null) return undefined;
    return JSON.parse(string);
  }, [string]);
  const setValue = useCallback(v => {
    if (v == null) {
      // Clear the Value
      setString(undefined);
    } else {
      // Store the Object as a serialized Value
      setString(JSON.stringify(v));
    }
  }, [setString]);
  return [value, setValue];
}
//# sourceMappingURL=hooks.js.map